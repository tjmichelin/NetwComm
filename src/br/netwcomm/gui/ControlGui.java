package br.netwcomm.gui;

import br.netwcomm.client.TCPClient;
import br.netwcomm.client.UDPClient;
import br.netwcomm.server.TCPServer;
import br.netwcomm.server.UDPServer;
import br.netwcomm.support.InternalMessageHandler;
import br.netwcomm.support.NetworkComponent;
import java.io.IOException;
import java.net.SocketException;

/**
 *
 * @author Thiago
 */
public class ControlGui extends javax.swing.JFrame implements InternalMessageHandler
{
    private int operatingMode = -1;
    private NetworkComponent compHandler = null;
    private Thread currProcessHandler = null;
    
    /**
     * Creates new form ControlGui
     */
    public ControlGui()
    {
        initComponents();
        startGuiUp();
        
        //Setting Internal Parameters
        this.setOperatingMode();
    }

    private void startGuiUp()
    {
        //Center form on screen
        this.setLocationRelativeTo(null);
        
        //Components Initialization with default values
        this.rdoServer.setSelected(true);
        this.rdoTCP.setSelected(true);
        this.txtTimeInterval.setText("10");
        this.txtNoTx.setText("50");
        this.txtServerAddress.setText("192.168.3.25");
        this.txtPort.setText("4444");
        this.txtPackageSize.setText("100");
        this.txtCommOut.setText("Program Started.\n");
        this.txtTimeout.setText("20");
    }
    
    private void setOperatingMode()
    {
        boolean devType;
        boolean protocol;
        
        devType = this.rdoServer.isSelected();
        protocol = this.rdoTCP.isSelected();
        
        if(devType && protocol)
        {
            this.operatingMode = netwcomm.NetwComm.COMM_TCP_SERVER;
            
            this.txtTimeInterval.setEnabled(false);
            this.txtNoTx.setEnabled(false);
            this.txtPackageSize.setEnabled(false);
            this.txtTimeout.setEnabled(true);
            this.txtServerAddress.setEnabled(false);           
        }
        else if(devType && !protocol)
        {
            this.operatingMode = netwcomm.NetwComm.COMM_UDP_SERVER;
            
            this.txtTimeInterval.setEnabled(false);
            this.txtNoTx.setEnabled(false);
            this.txtPackageSize.setEnabled(false);
            this.txtTimeout.setEnabled(true);
            this.txtServerAddress.setEnabled(false);           
        }
        else if(!devType && protocol)
        {
            this.operatingMode = netwcomm.NetwComm.COMM_TCP_CLIENT;
            
            this.txtTimeInterval.setEnabled(true);
            this.txtNoTx.setEnabled(true);
            this.txtPackageSize.setEnabled(true);
            this.txtTimeout.setEnabled(false);
            this.txtServerAddress.setEnabled(true);           
        }
        else
        {
            this.operatingMode = netwcomm.NetwComm.COMM_UDP_CLIENT;
            
            this.txtTimeInterval.setEnabled(true);
            this.txtNoTx.setEnabled(true);
            this.txtPackageSize.setEnabled(true);
            this.txtTimeout.setEnabled(false);
            this.txtServerAddress.setEnabled(true);           
        }
    }
    
    @Override
    public synchronized void printMessage(String message)
    {
        this.txtCommOut.append(message + "\n");
        this.txtCommOut.setCaretPosition(this.txtCommOut.getDocument().getLength());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDevType = new javax.swing.ButtonGroup();
        btnGroupProtocol = new javax.swing.ButtonGroup();
        toolControl = new javax.swing.JToolBar();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        pnlCommSetup = new javax.swing.JPanel();
        pnlDevType = new javax.swing.JPanel();
        rdoServer = new javax.swing.JRadioButton();
        rdoClient = new javax.swing.JRadioButton();
        pnlParam = new javax.swing.JPanel();
        lblTimeInterval = new javax.swing.JLabel();
        txtTimeInterval = new javax.swing.JTextField();
        lblNoTx = new javax.swing.JLabel();
        txtNoTx = new javax.swing.JTextField();
        lblServerAddress = new javax.swing.JLabel();
        txtServerAddress = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        lblPackageSize = new javax.swing.JLabel();
        txtPackageSize = new javax.swing.JTextField();
        lblServerTimeOut = new javax.swing.JLabel();
        txtTimeout = new javax.swing.JTextField();
        pnlProtocol = new javax.swing.JPanel();
        rdoTCP = new javax.swing.JRadioButton();
        rdoUDP = new javax.swing.JRadioButton();
        pnlCommOutput = new javax.swing.JPanel();
        scrollCommOutput = new javax.swing.JScrollPane();
        txtCommOut = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TCP/UDP Communication Analysis");
        setName("frmControl"); // NOI18N
        setResizable(false);

        toolControl.setFloatable(false);
        toolControl.setRollover(true);

        btnStart.setIcon(new javax.swing.ImageIcon("C:\\Users\\Thiago\\Documents\\NetBeansProjects\\NetwComm\\src\\resources\\control_play_blue.png")); // NOI18N
        btnStart.setText("Start");
        btnStart.setFocusable(false);
        btnStart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        toolControl.add(btnStart);

        btnStop.setIcon(new javax.swing.ImageIcon("C:\\Users\\Thiago\\Documents\\NetBeansProjects\\NetwComm\\src\\resources\\control_stop_blue.png")); // NOI18N
        btnStop.setText("Stop");
        btnStop.setFocusable(false);
        btnStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        toolControl.add(btnStop);

        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/door_in.png"))); // NOI18N
        btnExit.setText("Close");
        btnExit.setFocusable(false);
        btnExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        toolControl.add(btnExit);

        pnlDevType.setBorder(javax.swing.BorderFactory.createTitledBorder("Device Type"));

        btnGroupDevType.add(rdoServer);
        rdoServer.setText("Sensor (Server)");
        rdoServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoServerActionPerformed(evt);
            }
        });

        btnGroupDevType.add(rdoClient);
        rdoClient.setText("Controller (Client)");
        rdoClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDevTypeLayout = new javax.swing.GroupLayout(pnlDevType);
        pnlDevType.setLayout(pnlDevTypeLayout);
        pnlDevTypeLayout.setHorizontalGroup(
            pnlDevTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDevTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdoClient)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDevTypeLayout.setVerticalGroup(
            pnlDevTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDevTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDevTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoServer)
                    .addComponent(rdoClient))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlParam.setBorder(javax.swing.BorderFactory.createTitledBorder("Transceiver Parameters"));

        lblTimeInterval.setText("Time Interval (ms):");

        lblNoTx.setText("Number of Transmissions:");

        lblServerAddress.setText("Server Address:");

        lblPort.setText("Port:");

        lblPackageSize.setText("Data Package Size (Bytes):");

        lblServerTimeOut.setText("Server Timeout (s):");

        javax.swing.GroupLayout pnlParamLayout = new javax.swing.GroupLayout(pnlParam);
        pnlParam.setLayout(pnlParamLayout);
        pnlParamLayout.setHorizontalGroup(
            pnlParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParamLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlParamLayout.createSequentialGroup()
                        .addComponent(lblServerAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtServerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlParamLayout.createSequentialGroup()
                        .addGroup(pnlParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(pnlParamLayout.createSequentialGroup()
                                .addComponent(lblPackageSize)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPackageSize))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlParamLayout.createSequentialGroup()
                                .addComponent(lblTimeInterval)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTimeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlParamLayout.createSequentialGroup()
                                .addComponent(lblServerTimeOut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTimeout))
                            .addGroup(pnlParamLayout.createSequentialGroup()
                                .addComponent(lblNoTx)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNoTx, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        pnlParamLayout.setVerticalGroup(
            pnlParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlParamLayout.createSequentialGroup()
                .addGroup(pnlParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimeInterval)
                    .addComponent(txtTimeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNoTx)
                    .addComponent(txtNoTx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPackageSize)
                    .addComponent(txtPackageSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblServerTimeOut)
                    .addComponent(txtTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblServerAddress)
                    .addComponent(txtServerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPort)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlProtocol.setBorder(javax.swing.BorderFactory.createTitledBorder("Protocol"));

        btnGroupProtocol.add(rdoTCP);
        rdoTCP.setText("TCP");
        rdoTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTCPActionPerformed(evt);
            }
        });

        btnGroupProtocol.add(rdoUDP);
        rdoUDP.setText("UDP");
        rdoUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoUDPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProtocolLayout = new javax.swing.GroupLayout(pnlProtocol);
        pnlProtocol.setLayout(pnlProtocolLayout);
        pnlProtocolLayout.setHorizontalGroup(
            pnlProtocolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProtocolLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoTCP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoUDP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlProtocolLayout.setVerticalGroup(
            pnlProtocolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlProtocolLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlProtocolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoTCP)
                    .addComponent(rdoUDP))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlCommSetupLayout = new javax.swing.GroupLayout(pnlCommSetup);
        pnlCommSetup.setLayout(pnlCommSetupLayout);
        pnlCommSetupLayout.setHorizontalGroup(
            pnlCommSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCommSetupLayout.createSequentialGroup()
                .addGroup(pnlCommSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCommSetupLayout.createSequentialGroup()
                        .addComponent(pnlDevType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pnlParam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlCommSetupLayout.setVerticalGroup(
            pnlCommSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCommSetupLayout.createSequentialGroup()
                .addGroup(pnlCommSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlProtocol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDevType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        pnlCommSetupLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pnlDevType, pnlProtocol});

        pnlCommOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Communication Output"));

        txtCommOut.setColumns(20);
        txtCommOut.setRows(5);
        scrollCommOutput.setViewportView(txtCommOut);

        javax.swing.GroupLayout pnlCommOutputLayout = new javax.swing.GroupLayout(pnlCommOutput);
        pnlCommOutput.setLayout(pnlCommOutputLayout);
        pnlCommOutputLayout.setHorizontalGroup(
            pnlCommOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollCommOutput)
        );
        pnlCommOutputLayout.setVerticalGroup(
            pnlCommOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollCommOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolControl, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(pnlCommOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlCommSetup, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolControl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCommSetup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCommOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void rdoServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoServerActionPerformed
        // TODO add your handling code here:
        this.setOperatingMode();
    }//GEN-LAST:event_rdoServerActionPerformed

    private void rdoClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoClientActionPerformed
        // TODO add your handling code here:
        this.setOperatingMode();
    }//GEN-LAST:event_rdoClientActionPerformed

    private void rdoTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTCPActionPerformed
        // TODO add your handling code here:
        this.setOperatingMode();
    }//GEN-LAST:event_rdoTCPActionPerformed

    private void rdoUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoUDPActionPerformed
        // TODO add your handling code here:
        this.setOperatingMode();
    }//GEN-LAST:event_rdoUDPActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        int timeInterval = Integer.parseInt(this.txtTimeInterval.getText().trim());
        int noTx = Integer.parseInt(this.txtNoTx.getText().trim());
        int pkgSize = Integer.parseInt(this.txtPackageSize.getText().trim());
        int timeout = Integer.parseInt(this.txtTimeout.getText().trim()) * 1000;
        String serverAddr = this.txtServerAddress.getText().trim();
        int port = Integer.parseInt(this.txtPort.getText().trim());
        
        switch(this.operatingMode)
        {
            case netwcomm.NetwComm.COMM_TCP_SERVER:
                
                try
                {
                    TCPServer tcpServer = new TCPServer(port, true, this, timeout);
                    this.compHandler = tcpServer;

                    this.currProcessHandler = new Thread(tcpServer);
                    currProcessHandler.start();
                }
                catch(IOException iotcpserv)
                {
                    this.printMessage("Error: " + iotcpserv.getMessage());
                }
                catch(Exception tcpe)
                {
                    this.printMessage("Error: " + tcpe.getMessage());
                }
            
            break;
                
            case netwcomm.NetwComm.COMM_TCP_CLIENT:
                
                try
                {
                    TCPClient tcpClient = new TCPClient(port, true, this, serverAddr,
                            timeInterval, noTx, pkgSize);
                    this.compHandler = tcpClient;

                    this.currProcessHandler = new Thread(tcpClient);
                    currProcessHandler.start();
                }
                catch(Exception iotcpcli)
                {
                    this.printMessage("Error: " + iotcpcli.getMessage());
                }
                
            break;
                
            case netwcomm.NetwComm.COMM_UDP_SERVER:
        
                try
                {
                    UDPServer udpserver = new UDPServer(port, true, this, timeout);
                    this.compHandler = udpserver;
                    
                    this.currProcessHandler = new Thread(udpserver);
                    currProcessHandler.start();
                }
                catch (SocketException ex)
                {
                    this.printMessage("I/O Error: " + ex.getMessage());
                }
                catch(Exception udpserver)
                {
                    this.printMessage("Error: " + udpserver.getMessage());
                }
                
            break;
                
            case netwcomm.NetwComm.COMM_UDP_CLIENT:
        
                try
                {
                    UDPClient udpclient = new UDPClient(port, true, this, serverAddr,
                        timeInterval, noTx, pkgSize);
                    this.compHandler = udpclient;
                    
                    this.currProcessHandler = new Thread(udpclient);
                    this.currProcessHandler.start();
                }
                catch (SocketException ex)
                {

                }
                
            break;
        }
    }//GEN-LAST:event_btnStartActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGroupDevType;
    private javax.swing.ButtonGroup btnGroupProtocol;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel lblNoTx;
    private javax.swing.JLabel lblPackageSize;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblServerAddress;
    private javax.swing.JLabel lblServerTimeOut;
    private javax.swing.JLabel lblTimeInterval;
    private javax.swing.JPanel pnlCommOutput;
    private javax.swing.JPanel pnlCommSetup;
    private javax.swing.JPanel pnlDevType;
    private javax.swing.JPanel pnlParam;
    private javax.swing.JPanel pnlProtocol;
    private javax.swing.JRadioButton rdoClient;
    private javax.swing.JRadioButton rdoServer;
    private javax.swing.JRadioButton rdoTCP;
    private javax.swing.JRadioButton rdoUDP;
    private javax.swing.JScrollPane scrollCommOutput;
    private javax.swing.JToolBar toolControl;
    private javax.swing.JTextArea txtCommOut;
    private javax.swing.JTextField txtNoTx;
    private javax.swing.JTextField txtPackageSize;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtServerAddress;
    private javax.swing.JTextField txtTimeInterval;
    private javax.swing.JTextField txtTimeout;
    // End of variables declaration//GEN-END:variables
}